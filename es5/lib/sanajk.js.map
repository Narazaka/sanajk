{"version":3,"sources":["lib/sanajk.js"],"names":["response","ok","no_content","bad_request","internal_server_error","SanaJK","events","charset","sender","_request_parser","Shiori","Request","Parser","name","dirpath","_has_event","_load","_unload","request_str","transaction","request","parse","_build_response","test","request_line","version","toString","to","id","headers","header","ID","String","Number","status_line","code","Value","length","Charset","Sender","Message","Response","value","value_str","Reference0"],"mappings":"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","file":"lib/sanajk.js","sourcesContent":["import ShioriJK from 'shiorijk';\nimport {ShioriTransaction} from 'shiori_transaction';\n\n/**\n * SHIORI load() callback\n * @typedef {function(dirpath: string): Promise<number>} LoadCallback\n */\n\n/**\n * SHIORI request() callback\n * @typedef {function(request_str: string): Promise<string>} RequestCallback\n */\n\n/**\n * SHIORI unload() callback\n * @typedef {function(): Promise<number>} UnloadCallback\n */\n\n/**\n * event definitions\n * @typedef {{_load: LoadCallback, _unload: UnloadCallback, [id]: RequestCallback}} Events\n */\n\n/**\n * Ukagaka SHIORI submodule 'SanaJK'\n */\nexport class SanaJK {\n  /**\n   * initialize Sana\n   * @param {Events} events event definitions\n   */\n  constructor(events = {}) {\n    /**\n     * events object\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * default Charset header value\n     * @type {string}\n     */\n    this.charset = 'UTF-8';\n    /**\n     * default Sender header value\n     * @type {string}\n     */\n    this.sender = 'SanaJK';\n    this._request_parser = new ShioriJK.Shiori.Request.Parser();\n  }\n\n  _has_event(name) {\n    return typeof this.events[name] === 'function';\n  }\n\n  /**\n   * SHIORI load()\n   * @param {string} dirpath the ghost/master directory path\n   * @return {Promise<number>} status code\n   */\n  async load(dirpath) {\n    /**\n     * the ghost/master path\n     * @type {string}\n     */\n    this.dirpath = dirpath;\n    if (this._has_event('_load')) return await this._load(dirpath);\n  }\n\n  /**\n   * SHIORI unload()\n   * @return {Promise<number>} status code\n   */\n  async unload() {\n    if (this._has_event('_unload')) return await this._unload();\n  }\n\n  /**\n   * SHIORI request()\n   * @param {string} request_str SHIORI Request\n   * @return {Promise<string>} SHIORI Response\n   */\n  async request(request_str) {\n    const transaction = new ShioriTransaction();\n    try {\n      transaction.request = this._request_parser.parse(request_str + '');\n    } catch (error) {\n      return this._build_response(bad_request());\n    }\n    try {\n      if (/^2/.test(transaction.request.request_line.version.toString())) {\n        return this._build_response(bad_request());\n      }\n      const request = transaction.request.to('3.0');\n      const id = request.headers.header.ID;\n      let response;\n      if (this._has_event(id)) response = await this.events[id](request);\n      if (typeof response === 'string' || typeof response === 'number'\n        || response instanceof String || response instanceof Number) {\n        return this._build_response(ok(response));\n      } else {\n        return this._build_response(response);\n      }\n    } catch (error) {\n      return this._build_response(internal_server_error());\n    }\n  }\n\n  _build_response(response) {\n    const status_line = response.status_line;\n    const headers = response.headers;\n    if (status_line.version == null) status_line.version = '3.0';\n    if (!status_line.code)\n      status_line.code =\n        headers.header.Value != null && headers.header.Value.toString().length ? 200 : 204;\n    if (!headers.header.Charset) headers.header.Charset = this.charset;\n    if (!headers.header.Sender) headers.header.Sender = this.sender;\n    return response.toString();\n  }\n}\n\n/**\n * empty response struct\n * @return {ShioriJK.Message.Response} empty SHIORI Response\n */\nexport function response() {\n  return new ShioriJK.Message.Response();\n}\n\n/**\n * normal response (200 OK or 204 No Content)\n * @param {string} value Value header content\n * @param {string} to Reference0 header content (for communication)\n * @return {ShioriJK.Message.Response} SHIORI Response\n */\nexport function ok(value, to) {\n  const value_str = value == null ? '' : value.toString();\n  if (value_str.length !== 0) {\n    const response = new ShioriJK.Message.Response({\n      status_line: {\n        code: 200,\n      },\n      headers: {\n        Value: value_str,\n      },\n    });\n    if (to) response.headers.header.Reference0 = to.toString();\n    return response;\n  } else {\n    return no_content();\n  }\n}\n\n/**\n * 204 No Content\n * @return {ShioriJK.Message.Response} SHIORI Response\n */\nexport function no_content() {\n  return new ShioriJK.Message.Response({status_line: {code: 204} });\n}\n\n/**\n * 400 Bad Request\n * @return {ShioriJK.Message.Response} SHIORI Response\n */\nexport function bad_request() {\n  return new ShioriJK.Message.Response({status_line: {code: 400} });\n}\n\n/**\n * 500 Internal Server Error\n * @return {ShioriJK.Message.Response} SHIORI Response\n */\nexport function internal_server_error() {\n  return new ShioriJK.Message.Response({status_line: {code: 500} });\n}\n"],"sourceRoot":"/source/"}